// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TransportationArea.DBProviderService;

#nullable disable

namespace TransportationArea.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20231117201129_AddTableOrderStatus")]
    partial class AddTableOrderStatus
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TransportationArea.DBProviderService.Data.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("TransportationArea.DBProviderService.Data.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("Capacity")
                        .HasColumnType("double precision");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("TransportationArea.DBProviderService.Data.CarRoute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CarId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("End")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Mass")
                        .HasColumnType("double precision");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<int>("ReceivedSityId")
                        .HasColumnType("integer");

                    b.Property<int>("SendSityId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Start")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ReceivedSityId");

                    b.HasIndex("SendSityId");

                    b.ToTable("CarRoutes");
                });

            modelBuilder.Entity("TransportationArea.DBProviderService.Data.GridOfArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Area1Id")
                        .HasColumnType("integer");

                    b.Property<int>("Area2Id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Area1Id");

                    b.HasIndex("Area2Id");

                    b.ToTable("GridsOfArea");
                });

            modelBuilder.Entity("TransportationArea.DBProviderService.Data.LoadingPoints", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AreaId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.ToTable("LoadingPoints");
                });

            modelBuilder.Entity("TransportationArea.DBProviderService.Data.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("LoadingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Mass")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<string>("ReceivedAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ReceivedSityId")
                        .HasColumnType("integer");

                    b.Property<string>("SendAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SendSityId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ReceivedSityId");

                    b.HasIndex("SendSityId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("TransportationArea.DBProviderService.Data.OrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("End")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Start")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrdersStatus");
                });

            modelBuilder.Entity("TransportationArea.DBProviderService.Data.CarRoute", b =>
                {
                    b.HasOne("TransportationArea.DBProviderService.Data.Car", "Car")
                        .WithMany()
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TransportationArea.DBProviderService.Data.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TransportationArea.DBProviderService.Data.LoadingPoints", "ReceivedSity")
                        .WithMany()
                        .HasForeignKey("ReceivedSityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TransportationArea.DBProviderService.Data.LoadingPoints", "SendSity")
                        .WithMany()
                        .HasForeignKey("SendSityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("Order");

                    b.Navigation("ReceivedSity");

                    b.Navigation("SendSity");
                });

            modelBuilder.Entity("TransportationArea.DBProviderService.Data.GridOfArea", b =>
                {
                    b.HasOne("TransportationArea.DBProviderService.Data.Area", "Area1")
                        .WithMany()
                        .HasForeignKey("Area1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TransportationArea.DBProviderService.Data.Area", "Area2")
                        .WithMany()
                        .HasForeignKey("Area2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area1");

                    b.Navigation("Area2");
                });

            modelBuilder.Entity("TransportationArea.DBProviderService.Data.LoadingPoints", b =>
                {
                    b.HasOne("TransportationArea.DBProviderService.Data.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");
                });

            modelBuilder.Entity("TransportationArea.DBProviderService.Data.Order", b =>
                {
                    b.HasOne("TransportationArea.DBProviderService.Data.LoadingPoints", "ReceivedSity")
                        .WithMany()
                        .HasForeignKey("ReceivedSityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TransportationArea.DBProviderService.Data.LoadingPoints", "SendSity")
                        .WithMany()
                        .HasForeignKey("SendSityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReceivedSity");

                    b.Navigation("SendSity");
                });

            modelBuilder.Entity("TransportationArea.DBProviderService.Data.OrderStatus", b =>
                {
                    b.HasOne("TransportationArea.DBProviderService.Data.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });
#pragma warning restore 612, 618
        }
    }
}
